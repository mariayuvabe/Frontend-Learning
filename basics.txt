Strings I
    You can create strings with " or '
    .length is a property that gives you the length of a string
    .toUpperCase() is a function that converts the string to upper case
    .toLowerCase() is a function that converts the string to lower case
    parentheses () on function calls are required. .length is a property that is already pre-computed; therefore, it does not need parentheses.
    console.log(...) is used for debugging and is NOT a replacement for return.

String length 

Complete the function getCharCount such that it returns the number of characters in the str parameter that it receive

 Shout my name 

Complete the function shoutMyName such that it returns the name parameter it receives all in upper case.

Lower case string 

Complete the function lowerName such that it returns the name parameter it receives all in lower case.

Character access
Square brackets [index] are used to access a specific index from a string.
The index starts at 0. So the first character is index 0.
You can combine it with the length of a string to get another character in another position.
The .at() method allows you to read a character at an index (which can also be negative).

Sunstring Access:
A substring is a part or a portion of a string.
string.substring(indexStart, indexEnd) is used to return a portion of the string.
indexStart: the position of the first character you'd like to include.
indexEnd: the position of the first character you'd like to ignore.
the indexEnd argument is optional which means you can leave it out.

Plus operator

The + operator is used to add 2 numbers
The + operator is used to concatenate 2 strings

Template string
A template string is a string created with the backtick character: `
Template strings can span multiple lines
Template strings support interpolation with the ${variableName} syntax

NUMBERS:
Convert from a number to string: value.toString()
NaN stands for Not a Number
NaN is often a sign of a bug.

Convert from string to number Number.parseInt(value, 10).
Number.parseInt() is the name of the function you're calling.
10 is the radix which you should specify.
Make sure to always specify the radix to avoid unpleasant surprises.

VARIABLES:

When you use a variable for the first time in JavaScript, you need to declare it with either let or const.
Use let for variables that you will need to re-assign later on (as in changing their value)
Use const for variables that you won't need to re-assign later on.
Variables declared with const are not constant. We will see why later in this course.
Variables declared with const cannot be re-assigned so you cannot have the = next to that variable name after declaring it.
If you see var, it's from the old version of JavaScript. You can convert it to let (sometimes const if the variable is not re-assigned).

CONDITIONS:
Using an if condition, you can run a piece of code when the condition evaluates to true
The syntax is if (condition) and then curly braces {} wrap the lines of code that correspond to this condition
The else keyword can be used to perform some other code based on all the other conditions not satisfied with the if.

When you have an if/else condition that returns two different results, it is possible to drop the else keyword.
Always use triple equals (===) when comparing 2 values in JavaScript

/ The ternary operator
// Short if conditions can sometimes be written using the ternary operator. The ternary operator is a short way of writing an if...else statement.

// The ternary operator has the following syntax:


// condition ? expressionWhenTrue : expressionWhenFalse


ARRAY:
const data = [1, 2, 3] is an array containing 3 numbers.
array.length returns the number of elements inside the array.
array.push(x) allows you to add the variable x to the end of the array.
array.push(x) returns the new length of the array (after the push has been made).
Arrays defined with const are not constants because you can change the elements inside of it. However, you cannot re-assign them to another value thus they will always be an array.

ARRAYFOREACH
.forEach(callback) iterates over every item in an array.
A callback is a function definition passed as an argument to another function.
Always start with a console.log() inside the .forEach() to visualize the shift from array to array item (you can skip that when you become used to it).
The .forEach() method will take your function definition and call it for every item of the array. Every time the callback is called, the first parameter will represent the corresponding array item.
Name your arrays in plural and the array item (inside the .forEach()) in singular.
Make sure to correctly place the return inside a function that contains a .forEach().

ARRAYFILTER
 * @param {array[][]} rows
 */
export function renderTableRows(rows) {
    let html = "";
    rows.forEach(function(row) {
        html += `<tr>
        <td>${row[0]}</td>
        <td>${row[1]}</td>
    </tr>`
    });
    return html;
}
